version: 2.1
# This pipeline was inspired by https://github.com/CircleCI-Public/circleci-demo-aws-ecs-ecr/blob/orbs/.circleci/config.yml
orbs:
  # The maven orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/maven
  aws-ecr: circleci/aws-ecr@8.2.1

executors:
  openjdk17:
    docker:
      - image: circleci/openjdk:17.0.1-jdk-buster

commands:
  checkout-restore-maven-cache:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - checkout  # check out source code to working directory
      # Download and cache dependencies
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn dependency:go-offline # gets the project dependencies and use offline mode
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

  save-bash-env:
    steps:
      - run: |
          cp $BASH_ENV ~/bash.env
      - persist_to_workspace:
          root: ~/
          paths:
            - bash.env

  load-bash-env:
    steps:
      - attach_workspace:
          at: ~/
      - run: |
          cat ~/bash.env >> $BASH_ENV

  save-version-to-bash-env:
    steps: # a collection of executable commands
      - run: |
          NEW_VALUE=$(mvn help:evaluate -Dexpression='project.version' -q -DforceStdout)
          echo "export POM_VERSION="$NEW_VALUE >> $BASH_ENV
      - run: echo $POM_VERSION

workflows:
  default:
    jobs:
      #- adjust-versions
      - build
      - checkstyle:
          requires:
            - build
      - test:
          requires:
            - checkstyle
      - integration-test:
          requires:
            - checkstyle
      - docker-lint:
          requires:
            - checkstyle
      - docker-build:
          requires:
            - docker-lint
            - integration-test
            - test
      - eks-deploy:
          requires:
            - docker-build

jobs:
  build: # runs not using Workflows must have a `build` job as entry point
    docker:
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/openjdk:17.0.1-jdk-buster # run the steps with Docker with this image as the primary container; this is where all `steps` will run
    working_directory: ~/repo # directory where steps will run
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    steps: # a collection of executable commands
      - checkout-restore-maven-cache
      - run: # Use mvn clean and package as the standard maven build phase
          name: Build app
          command: mvn -B -DskipTests clean package
      - run:
          name: Save app version to file
          command: |
            APP_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo $APP_VERSION > target/appversion.txt
            cat target/appversion.txt
      - persist_to_workspace:
          root: target
          paths:
            - ./*.jar
            - ./appversion.txt

  test:
    docker:
      - image: circleci/openjdk:17.0.1-jdk-buster
    working_directory: ~/repo
    steps:
      - checkout-restore-maven-cache
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

  integration-test:
    docker:
      - image: circleci/openjdk:17.0.1-jdk-buster
    working_directory: ~/repo
    steps:
      - checkout-restore-maven-cache
      # Then run your integration tests!
      - run: mvn integration-test

  checkstyle:
    docker:
      - image: circleci/openjdk:17.0.1-jdk-buster
    working_directory: ~/repo
    steps:
      - checkout-restore-maven-cache
      - run: mvn checkstyle:checkstyle

  docker-lint:
    docker:
      - image: circleci/openjdk:17.0.1-jdk-buster
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install hadolint
          command: |
            curl https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 --create-dirs -o tmp/hadolint &&\
            chmod +x tmp/hadolint
      - run:
          name: docker lint
          command: |
            # See local hadolint install instructions: https://github.com/hadolint/hadolint
            # This is linter for Dockerfiles
            ./tmp/hadolint Dockerfile --ignore DL3042

  docker-build:
    docker:
      - image: cimg/aws:2023.03
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Setup common environment variables
          command: |
            TMP_APP_VERSION=$(cat appversion.txt)
            echo "App-Version: " $TMP_APP_VERSION
            echo 'export APP_VERSION='$TMP_APP_VERSION >> $BASH_ENV
            TMP_FULL_IMAGE_NAME="$AWS_ECR_REGISTRY_ID".dkr.ecr."$AWS_REGION".amazonaws.com/"$AWS_ECR_REPOSITORY":v"$TMP_APP_VERSION"
            echo 'export FULL_IMAGE_NAME='$TMP_FULL_IMAGE_NAME >> $BASH_ENV
      - run:
          name: docker build
          command: |
            echo "App-Version: "$APP_VERSION
            echo "Full image name: "$FULL_IMAGE_NAME
            docker build --build-arg JAR_FILE=*.jar -t $FULL_IMAGE_NAME .
            echo docker images
      - run:
          name: Test image
          command: |
            docker run -d -p 8080:8080 --name built-image $FULL_IMAGE_NAME
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:8080/ping | grep "pong"
      - aws-ecr/ecr-login:
          registry-id: AWS_ECR_REGISTRY_ID
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: $AWS_REGION
      - aws-ecr/push-image:
          repo: $AWS_ECR_REPOSITORY
          region: $AWS_REGION
          registry-id: AWS_ECR_REGISTRY_ID
          tag: v$APP_VERSION

  eks-deploy:
    docker:
      - image: cimg/aws:2023.03
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Setup common environment variables
          command: |
            TMP_APP_VERSION=$(cat appversion.txt)
            echo 'export APP_VERSION='$TMP_APP_VERSION >> $BASH_ENV
      - run:
          name: edit k8s deployment file
          command: |
            sed -i 's@$AWS_ECR_REGISTRY_ID@'"$AWS_ECR_REGISTRY_ID"'@' ./k8s.yaml
            sed -i 's@$AWS_REGION@'"$AWS_REGION"'@' ./k8s.yaml
            sed -i 's@$AWS_ECR_REPOSITORY@'"$AWS_ECR_REPOSITORY"'@' ./k8s.yaml
            sed -i 's@$APP_VERSION@'"$APP_VERSION"'@' ./k8s.yaml
            cat ./k8s.yaml
      - run:
          name: update kubeconfig
          command: |
            aws eks update-kubeconfig --name udacity-devops-c5-capstone-cluster --region $AWS_REGION
      - run:
          name: deploy to eks
          command: |
            kubectl apply -f k8s.yaml
      - run:
          name: Test deployment (Please manually tear down AWS resources after use, if desired)
          command: |
            # see https://kubernetes.io/docs/reference/kubectl/jsonpath/
            # alternative you can use https://www.baeldung.com/linux/jq-command-json
            EKS_ENDPOINT=$(kubectl get services -o json | jq -r '.items[] | select(.metadata.name=="spring-demo-service") | .status.loadBalancer.ingress[0].hostname')
            for attempt in {1..50}; do
              curl -s --retry 10 http://$EKS_ENDPOINT/ping | grep -E "pong"
            done
      

  #the folowing step is in progress and not part of the workflow yet
  adjust-versions: # runs not using Workflows must have a `build` job as entry point
    docker:
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: circleci/openjdk:17.0.1-jdk-buster # run the steps with Docker with this image as the primary container; this is where all `steps` will run

    working_directory: ~/repo # directory where steps will run
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: Cut new release
          command: |
            # assemble current and new version numbers
            OLD_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            # Windows -> mvn help:evaluate -Dexpression='project.version' -q -DforceStdout
            echo $OLD_VERSION
            
            MAJ_VERSION=$(echo "$OLD_VERSION" | cut -d '.' -f 1)
            MIN_VERSION=$(echo "$OLD_VERSION" | cut -d '.' -f 2)
            PATCH_VERSION=$(echo "$OLD_VERSION" | cut -d '.' -f 3)
            
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            echo $BRANCH_NAME
            
            if [[ "$BRANCH_NAME" == 'master' ]];
            then
              if [[ "$OLD_VERSION" == *-SNAPSHOT ]];
              then
                # increment minor version number
                NEW_PATCH_VERSION=$(($PATCH_VERSION + 1))
                MASTER_VERSION="$MAJ_VERSION.$MIN_VERSION.$NEW_PATCH_VERSION"
                mvn versions:set versions:commit -DnewVersion=$MASTER_VERSION -DprocessAllModules=true
              else
                # TODO How to update - undefined number incrementation 
                echo "No version update is made";
              fi;
            
              exit 0;
            fi
            
            # increment minor version number
            NEW_PATCH_VERSION=$(($PATCH_VERSION + 1))
            DEV_VERSION="$MAJ_VERSION.$MIN_VERSION.$NEW_PATCH_VERSION-$BRANCH_NAME-SNAPSHOT"
            
            echo "Releasing $OLD_VERSION as $DEV_VERSION"
            mvn versions:set versions:commit -DnewVersion=$DEV_VERSION -DprocessAllModules=true
            
            # setup git
            #git config user.name "Release Script"
            #git config user.email "builds@test.com"
            
            # commit and tag
            #git add pom.xml
            #git commit -m "release: $NEW_VERSION"
            #git tag "$NEW_VERSION"

          
