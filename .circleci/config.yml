version: 2.1
orbs:
  maven: circleci/maven@1.4.1

workflows:
  default:
    jobs:
      - adjust-versions
#      - build-backend
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]

jobs: # a collection of steps
  build-backend: # runs not using Workflows must have a `build` job as entry point
    docker:
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: circleci/openjdk:17.0.1-jdk-buster # run the steps with Docker with this image as the primary container; this is where all `steps` will run

    working_directory: ~/repo # directory where steps will run
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps: # a collection of executable commands

      - checkout  # check out source code to working directory
      # Download and cache dependencies
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn dependency:go-offline # gets the project dependencies and use offline mode
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

 #     - store_artifacts: # store the uberjar as an artifact
 #         # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
 #         path: target/demo-0.0.1-SNAPSHOT.jar
 #         # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples



  adjust-versions: # runs not using Workflows must have a `build` job as entry point
    docker:
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: circleci/openjdk:17.0.1-jdk-buster # run the steps with Docker with this image as the primary container; this is where all `steps` will run

    working_directory: ~/repo # directory where steps will run
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: check maven versions
          command: |
            mvn -version
      - run:
          command: |
            
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            echo $BRANCH_NAME
            
            # assemble current and new version numbers
            OLD_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo $OLD_VERSION
            
            MAJ_VERSION=$(echo "$OLD_VERSION" | cut -d '.' -f 1)
            MIN_VERSION=$(echo "$OLD_VERSION" | cut -d '.' -f 2)
            PATCH_VERSION=$(echo "$OLD_VERSION" | cut -d '.' -f 3)
            
            
            if [[ "$BRANCH_NAME" == 'master' ]];
            then
              if [[ "$OLD_VERSION" == *-SNAPSHOT ]];
              then
                # increment minor version number
                NEW_PATCH_VERSION=$(($PATCH_VERSION + 1))
                MASTER_VERSION="$MAJ_VERSION.$MIN_VERSION.$NEW_PATCH_VERSION"
                mvn versions:set -DnewVersion=$MASTER_VERSION
              else
                # TODO How to update - undefined number incrementation 
                echo "No version update is made";
              fi;
            
              exit 0;
            fi
            
            # increment minor version number
            NEW_PATCH_VERSION=$(($PATCH_VERSION + 1))
            DEV_VERSION="$MAJ_VERSION.$MIN_VERSION.$NEW_PATCH_VERSION-$BRANCH_NAME-SNAPSHOT"
            
            echo "Releasing $OLD_VERSION as $DEV_VERSION"
            
            mvn versions:set -DnewVersion=$DEV_VERSION
            
            # setup git
            #git config user.name "Release Script"
            #git config user.email "builds@test.com"
            
            # commit and tag
            #git add pom.xml
            #git commit -m "release: $NEW_VERSION"
            #git tag "$NEW_VERSION"

          name: Cut new release
